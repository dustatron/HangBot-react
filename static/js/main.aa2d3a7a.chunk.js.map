{"version":3,"sources":["components/Robot.js","components/LetterChoices.js","components/LetterBlanks.js","components/TurnCount.js","components/EndGameModal.js","components/App.js","actions/ActionTypes.js","serviceWorker.js","components/WordList.js","reducers/index.js","reducers/win-game-reducer.js","reducers/wrong-guess-reducer.js","reducers/track-guess-reducer.js","reducers/set-word-reducer.js","index.js"],"names":["Robot","props","partArr","position","width","height","left","top","background","borderRadius","transform","style","margin","boxShadow","splice","currentTurnCount","map","part","LetterChoices","letterBox","useSpring","display","padding","fontSize","fontWeight","cursor","opacity","from","justifyContent","flexWrap","split","letter","guessedLetters","includes","div","onClick","onLetterClick","updateGuessCounter","handleLetterClick","LetterBlanks","greyBox","showBox","textAlign","alignItems","minWidth","border","boxSizing","letters","toUpperCase","TurnCount","EndGameModal","Modal","show","showModal","onHide","onResetClick","Header","closeButton","Title","endState","Body","Footer","Button","App","shouldShowModal","winGame","checkForWin","mainLetters","currentWord","trackGuess","filter","sort","join","handleWinGame","dispatch","type","a","action","isWin","wrongGuesses","handleDecrementingTurn","handleResettingGame","action2","action3","action4","this","Fragment","Container","Row","Col","class","xs","React","Component","connect","state","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","WordList","rootReducer","combineReducers","newState","newWord","Math","floor","random","length","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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CA,QACA,QACA,QACA,SACA,UACA,QACA,QACA,WACA,YACA,QACA,QACA,YACA,SACA,QACA,WACA,SACA,WACA,SACA,SACA,WACA,UACA,UACA,QACA,UACA,UACA,YACA,SACA,SACA,YACA,UACA,QACA,UACA,QACA,WACA,SACA,UACA,WACA,SACA,UACA,WACA,QACA,YACA,SACA,SACA,SACA,WACA,UACA,QACA,WACA,WACA,aACA,QACA,WACA,WACA,WACA,UACA,QACA,QACA,SACA,YACA,SACA,SACA,QACA,WACA,QACA,SACA,UACA,SACA,aACA,QACA,YACA,SACA,aACA,SACA,SACA,QACA,MACA,UACA,WACA,aACA,UACA,WACA,QACA,QACA,SACA,OACA,WACA,SACA,UACA,SACA,SACA,SACA,QACA,UACA,QACA,QACA,QACA,W,gBCvFaC,EAPKC,YAAgB,CAClC1D,QCLa,WAA2B,IAA1B8B,EAAyB,uDAAjB,KAAMlB,EAAW,uCACvC,OAAQA,EAAOF,MACb,IJHoB,WIIlB,OAAO,EACT,IJJqB,YIKnB,OAAO,EACT,IJLsB,aIMpB,OAAO,KACT,QACE,OAAOoB,IDHXhB,aENa,WAAyB,IAAxBgB,EAAuB,uDAAf,GAAIlB,EAAW,uCACrC,OAAOA,EAAOF,MACZ,ILEuB,cKDrB,OAAOoB,EAAQ,EACjB,ILCuB,cKArB,OAAO,GACT,QACE,OAAOA,IFAX1B,WGPa,WAAyB,IAAxB0B,EAAuB,uDAAf,GAAIlB,EAAW,uCACrC,OAAQA,EAAOF,MACb,INMsB,aMLpB,IAAMiD,EAAQ,sBAAQ7B,GAAR,CAAelB,EAAO9C,SACpC,OAAO6F,EACT,INIyB,gBMHvB,MAAO,GACT,QACE,OAAO7B,IHAX3B,YIRa,WAAyB,IAAxB2B,EAAuB,uDAAf,GAAIlB,EAAW,uCACrC,OAAQA,EAAOF,MACb,IPUoB,WOTlB,IAAMkD,EAAUJ,EAASK,KAAKC,MAAMD,KAAKE,SAAWP,EAASQ,SAC7D,OAAOJ,EACT,QACE,OAAO9B,MCEPmC,EAAQC,YAAYT,EAAaxB,OAAOkC,8BAAgClC,OAAOkC,gCAErFC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SPMnB,SAAkBhC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgC,IAAIC,WAAwBxC,OAAOC,SAASwC,MACpDC,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,QAAQ,WAC9B,IAAMtC,EAAK,UAAMmC,WAAN,sBAEP1C,IAgEV,SAAiCO,EAAOC,GAEtCsC,MAAMvC,EAAO,CACXwC,QAAS,CAAE,iBAAkB,YAE5BnC,MAAK,SAAAoC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3C,UAAUC,cAAc2C,MAAMzC,MAAK,SAAAC,GACjCA,EAAayC,aAAa1C,MAAK,WAC7BV,OAAOC,SAASoD,eAKpBjD,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAoC,CAAwBjD,EAAOC,GAI/BC,UAAUC,cAAc2C,MAAMzC,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OO5B/BE,K","file":"static/js/main.aa2d3a7a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Robot = (props) => {\n  const botStyle = {\n    position: 'relative',\n    margin: 'auto',\n    width: '326px',\n    height: '363px',\n    background: '#000000',\n    boxShadow: '0px 0px 30px rgba(121, 120, 120, 0.15)',\n    borderRadius: '6px'\n  };\n\n  const body = {\n    position: 'absolute',\n    width: '133px',\n    height: '119px',\n    left: '32%',\n    top: '35%',\n    background: '#FFFFFF'\n  };\n  const leftArm = {\n    position: 'absolute',\n    width: '24.16px',\n    height: '80.07px',\n    left: '79%',\n    top: '35%',\n    background: '#FFFFFF',\n    transform: 'rotate(-109.89deg)'\n  };\n  const leftLeg = {\n    position: 'absolute',\n    width: '72px',\n    height: '20px',\n    left: '35%',\n    top: '75%',\n    background: '#FFFFFF',\n    transform: 'rotate(-90.89deg)'\n  };\n  const leftFoot = {\n    position: 'absolute',\n    width: '19px',\n    height: '52px',\n    left: '35%',\n    top: '78%',\n    background: '#FFFFFF',\n    transform: 'rotate(-90.89deg)'\n  };\n  const rightFoot = {\n    position: 'absolute',\n    width: '19px',\n    height: '52px',\n    left: '64%',\n    top: '78%',\n    background: '#FFFFFF',\n    transform: 'rotate(-90.89deg)'\n  };\n  const rightLeg = {\n    position: 'absolute',\n    width: '72px',\n    height: '20px',\n    left: '50%',\n    top: '75%',\n    background: '#FFFFFF',\n    transform: 'rotate(-90.89deg)'\n  };\n  const rightArm = {\n    position: 'absolute',\n    width: '24.16px',\n    height: '80.07px',\n    left: '17%',\n    top: '35%',\n    background: '#FFFFFF',\n    transform: 'rotate(-87.17deg)'\n  };\n\n  const head = {\n    position: 'absolute',\n    width: '93px',\n    height: '74px',\n    left: '38%',\n    top: '14%',\n    background: '#FFFFFF'\n  };\n\n  const rightEye = {\n    position: 'absolute',\n    width: '20px',\n    height: '20px',\n    left: '55%',\n    top: '20%',\n    borderRadius: '50%',\n    background: '#000000'\n  };\n  const leftEye = {\n    position: 'absolute',\n    width: '30px',\n    height: '30px',\n    left: '45%',\n    top: '18.5%',\n    borderRadius: '50%',\n    background: '#000000'\n  };\n  const mouth = {\n    position: 'absolute',\n    width: '57px',\n    height: '5px',\n    left: '45%',\n    top: '30%',\n\n    background: '#000000'\n  };\n\n  const partArr = [ head, rightEye, leftEye, mouth, body, leftArm, rightArm, leftLeg, rightLeg, leftFoot, rightFoot ];\n\n  return <div style={botStyle}>{partArr.splice(0, props.currentTurnCount).map((part) => <div style={part} />)}</div>;\n};\n\nRobot.propTypes = {\n  currentTurnCount: PropTypes.number\n};\n\nexport default Robot;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSpring, animated } from 'react-spring';\n\nfunction LetterChoices(props) {\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  // const items = letters.split('');\n  // const transitions = useTransition(items, (item) => item.key, {\n  //   from: { transform: 'translate3d(0,-40px,0)' },\n  //   enter: { transform: 'translate3d(0,0px,0)' },\n  //   leave: { transform: 'translate3d(0,-40px,0)' }\n  // });\n\n  const mainBox = {\n    margin: '20px auto',\n    width: '654px',\n    height: 'auto',\n    background: '#FFFFFF',\n    boxShadow: '0px 0px 20px rgba(102, 102, 102, 0.15)',\n    borderRadius: '15px',\n    padding: '20px',\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  };\n\n  const letterBox = useSpring({\n    display: 'inline',\n    padding: '5px',\n    margin: '5px',\n    fontSize: '30px',\n    fontWeight: 'bold',\n    cursor: 'pointer',\n    opacity: 1,\n    from: { opacity: 0 }\n  });\n\n  const handleLetterClick = (letter) => {\n    props.onLetterClick(letter);\n    props.updateGuessCounter(letter);\n  };\n\n  // useSpring({ opacity: 1, from: { opacity: 0 } });\n  // return transitions.map(({ item, props, key }) => (\n  //   <animated.div key={key} style={props}>\n  //     {item.text}\n  //   </animated.div>\n  // ));\n\n  return (\n    <div style={mainBox}>\n      {letters.split('').map((letter) => {\n        if (!props.guessedLetters.includes(letter)) {\n          return (\n            <animated.div\n              onClick={() => {\n                handleLetterClick(letter);\n              }}\n              style={letterBox}\n            >\n              {letter}\n            </animated.div>\n          );\n        }\n      })}\n    </div>\n  );\n}\n\nLetterChoices.propTypes = {\n  onLetterClick: PropTypes.func,\n  updateGuessCounter: PropTypes.func,\n  guessedLetters: PropTypes.array\n};\n\nexport default LetterChoices;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LetterBlanks(props) {\n  const mainBox = {\n    display: 'flex',\n    justifyContent: 'center'\n  };\n\n  const outterBox = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: '10px auto',\n    minWidth: '25%',\n    height: '74px',\n    border: '5px solid #000000',\n    boxSizing: 'border-box'\n  };\n\n  const greyBox = {\n    display: 'inline-block',\n    margin: '10px',\n    width: '49px',\n    height: '43px',\n    background: '#C4C4C4'\n  };\n\n  const showBox = {\n    display: 'inline-block',\n    margin: '10px',\n    width: '50px',\n    height: 'auto',\n    // padding: '0px 0px 20px 0px ',\n    fontSize: '40px',\n    textAlign: 'center'\n  };\n  return (\n    <div style={mainBox}>\n      <div style={outterBox}>\n        {props.letters.toUpperCase().split('').map((letter) => {\n          if (props.guessedLetters.includes(letter)) {\n            return <div style={showBox}>{letter}</div>;\n          } else if (letter === ' ') {\n            return <div style={showBox}>{letter}</div>;\n          } else {\n            return <div style={greyBox} />;\n          }\n        })}\n      </div>\n    </div>\n  );\n}\n\nLetterBlanks.propTypes = {\n  letter: PropTypes.string,\n  guessedLetters: PropTypes.array\n};\n\nexport default LetterBlanks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TurnCount = (props) => {\n  const mainBox = {\n    textAlign: 'center'\n  };\n  return (\n    <div style={mainBox}>\n      <h1>{props.currentTurnCount} Turns remaining</h1>\n    </div>\n  );\n};\n\nTurnCount.propTypes = {\n  currentTurnCount: PropTypes.number\n};\n\nexport default TurnCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ResetButton from './ResetButton';\nimport { Modal, Button } from 'react-bootstrap';\n\nfunction EndGameModal(props) {\n  return (\n    <div>\n      <Modal show={props.showModal} onHide={props.onResetClick}>\n        <Modal.Header closeButton>\n          <Modal.Title>{props.endState ? 'You Win!' : 'You Lose'}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {props.endState ? 'I am so proud of you. My human friend!' : \"It' okay to not be perfect like a robot.\"}\n          <br />\n          Care to try again?\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={props.onResetClick}> Restart Game </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nEndGameModal.propTypes = {\n  showModal: PropTypes.bool,\n  endState: PropTypes.bool,\n  onResetClick: PropTypes.func\n};\n\nexport default EndGameModal;\n","import React from 'react';\nimport Robot from './Robot';\nimport LetterChoices from './LetterChoices';\nimport LetterBlanks from './LetterBlanks';\nimport TurnCount from './TurnCount';\nimport ResetButton from './ResetButton';\nimport '../App.css';\nimport { connect } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport * as a from '../actions/ActionTypes';\nimport EndGameModal from './EndGameModal';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  shouldShowModal = () => {\n    if (this.props.winGame !== null) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  checkForWin = () => {\n    const mainLetters = this.props.currentWord.toUpperCase().split('');\n    const guessLetters = this.props.trackGuess;\n    const tempArr = mainLetters.filter((letter) => this.props.trackGuess.includes(letter.toUpperCase()));\n\n    if (tempArr.sort().join('') === mainLetters.sort().join('')) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  handleWinGame = () => {\n    if (this.checkForWin()) {\n      const { dispatch } = this.props;\n      const action = { type: a.WIN_GAME };\n      dispatch(action);\n    }\n  };\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    const action = { type: a.SET_WORD };\n    dispatch(action);\n  }\n\n  handleLetterClick = async (letter) => {\n    const { dispatch } = this.props;\n    const action = { type: a.ADD_LETTER, letter: letter };\n    await dispatch(action);\n\n    const isWin = this.checkForWin();\n    if (isWin) {\n      //user wins game\n      this.handleWinGame();\n    } else if (this.props.wrongGuesses <= 0 && !isWin) {\n      //user loses game\n      dispatch({ type: a.LOSE_GAME });\n    }\n  };\n\n  handleDecrementingTurn = (letter) => {\n    const { dispatch } = this.props;\n    if (!this.props.currentWord.toUpperCase().split('').includes(letter)) {\n      const action = { type: a.WRONG_GUESS };\n      dispatch(action);\n    }\n  };\n\n  handleResettingGame = () => {\n    const { dispatch } = this.props;\n    const action1 = { type: a.RESET_GAME };\n    const action2 = { type: a.RESET_GUESS };\n    const action3 = { type: a.RESET_LETTERS };\n    const action4 = { type: a.SET_WORD };\n    dispatch(action1);\n    dispatch(action2);\n    dispatch(action3);\n    dispatch(action4);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Container>\n          <Row>\n            <Col>\n              <h1 class=\"text-center\"> HangBot </h1>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Robot currentTurnCount={this.props.wrongGuesses} />\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <LetterBlanks letters={this.props.currentWord} guessedLetters={this.props.trackGuess} />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs=\"12\">\n              <TurnCount currentTurnCount={this.props.wrongGuesses} />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <LetterChoices\n                updateGuessCounter={this.handleDecrementingTurn}\n                onLetterClick={this.handleLetterClick}\n                guessedLetters={this.props.trackGuess}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <EndGameModal\n                onResetClick={this.handleResettingGame}\n                showModal={this.shouldShowModal()}\n                endState={this.props.winGame}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    winGame: state.winGame,\n    wrongGuesses: state.wrongGuesses,\n    trackGuess: state.trackGuess,\n    currentWord: state.currentWord\n  };\n};\n\nApp = connect(mapStateToProps)(App);\n\nexport default App;\n","//win-Game-Reducer commands\nexport const WIN_GAME = \"WIN_GAME\"; //set state to true\nexport const LOSE_GAME = \"LOSE_GAME\"; //set state to false\nexport const RESET_GAME = \"RESET_GAME\"; //reset winGame state to null\n\n//wrong-guess-reducer\nexport const WRONG_GUESS = \"WRONG_GUESS\"; //decrement by 1\nexport const RESET_GUESS = \"RESET_GUESS\"; //reset to 11\n\n//track-guess-reducer\nexport const ADD_LETTER = \"ADD_LETTER\"; // add the selected letter to letter guess array\nexport const RESET_LETTERS = \"RESET_LETTERS\"; // empty letter guess array\n\n//current-word-reducer\nexport const SET_WORD = \"SET_WORD\"; //get random word.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const WordList = [\n  'bruptly',\n  'absurd',\n  'abyss',\n  'affix',\n  'askew',\n  'avenue',\n  'awkward',\n  'axiom',\n  'azure',\n  'bagpipes',\n  'bandwagon',\n  'banjo',\n  'bayou',\n  'beekeeper',\n  'bikini',\n  'blitz',\n  'blizzard',\n  'boggle',\n  'bookworm',\n  'boxcar',\n  'boxful',\n  'buckaroo',\n  'buffalo',\n  'buffoon',\n  'buxom',\n  'buzzard',\n  'buzzing',\n  'buzzwords',\n  'caliph',\n  'cobweb',\n  'cockiness',\n  'croquet',\n  'crypt',\n  'curacao',\n  'cycle',\n  'daiquiri',\n  'dirndl',\n  'disavow',\n  'dizzying',\n  'duplex',\n  'dwarves',\n  'embezzle',\n  'equip',\n  'espionage',\n  'euouae',\n  'exodus',\n  'faking',\n  'fishhook',\n  'fixable',\n  'fjord',\n  'flapjack',\n  'flopping',\n  'fluffiness',\n  'flyby',\n  'foxglove',\n  'frazzled',\n  'frizzled',\n  'fuchsia',\n  'funny',\n  'gabby',\n  'galaxy',\n  'galvanize',\n  'gazebo',\n  'giaour',\n  'gizmo',\n  'glowworm',\n  'glyph',\n  'gnarly',\n  'gnostic',\n  'gossip',\n  'grogginess',\n  'haiku',\n  'haphazard',\n  'hyphen',\n  'iatrogenic',\n  'icebox',\n  'injury',\n  'ivory',\n  'ivy',\n  'jackpot',\n  'jaundice',\n  'jawbreaker',\n  'jaywalk',\n  'jazziest',\n  'jazzy',\n  'jelly',\n  'jigsaw',\n  'jinx',\n  'jiujitsu',\n  'jockey',\n  'jogging',\n  'joking',\n  'jovial',\n  'joyful',\n  'juicy',\n  'jukebox',\n  'jumbo',\n  'kayak',\n  'kazoo',\n  'keyhole'\n];\n\nexport default WordList;\n","import setWordReducer from \"./set-word-reducer\";\nimport trackGuessReducer from \"./track-guess-reducer\";\nimport winGameReducer from \"./win-game-reducer\";\nimport wrongGuessReducer from \"./wrong-guess-reducer\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  winGame: winGameReducer,\n  wrongGuesses: wrongGuessReducer,\n  trackGuess: trackGuessReducer,\n  currentWord: setWordReducer\n});\n\nexport default rootReducer;\n","import * as a from '../actions/ActionTypes';\n\nexport default (state = null, action) => {\n  switch (action.type) {\n    case a.WIN_GAME:\n      return true;\n    case a.LOSE_GAME:\n      return false;\n    case a.RESET_GAME:\n      return null;\n    default:\n      return state;\n  }\n};\n","import * as a from '../actions/ActionTypes';\n\nexport default (state = 11, action) => {\n  switch(action.type) {\n    case a.WRONG_GUESS:\n      return state - 1;\n    case a.RESET_GUESS:\n      return 11\n    default:\n      return state;\n  }\n}","import * as a from \"../actions/ActionTypes\";\n\nexport default (state = [], action) => {\n  switch (action.type) {\n    case a.ADD_LETTER:\n      const newState = [ ...state, action.letter ];\n      return newState;\n    case a.RESET_LETTERS:\n      return [];\n    default:\n      return state;\n  }\n};\n","import * as a from '../actions/ActionTypes';\nimport WordList from '../components/WordList';\nexport default (state = '', action) => {\n  switch (action.type) {\n    case a.SET_WORD:\n      const newWord = WordList[Math.floor(Math.random() * WordList.length)];\n      return newWord;\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./reducers\";\nimport { createStore } from \"redux\";\n\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}