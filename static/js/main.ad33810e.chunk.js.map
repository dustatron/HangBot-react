{"version":3,"sources":["components/Robot.js","components/LetterChoices.js","components/LetterBlanks.js","components/TurnCount.js","components/ResetButton.js","components/App.js","actions/ActionTypes.js","serviceWorker.js","components/WordList.js","reducers/index.js","reducers/win-game-reducer.js","reducers/wrong-guess-reducer.js","reducers/track-guess-reducer.js","reducers/set-word-reducer.js","index.js"],"names":["Robot","props","style","position","margin","width","height","background","boxShadow","borderRadius","left","top","transform","LetterChoices","letterBox","display","padding","fontSize","fontWeight","cursor","justifyContent","flexWrap","split","map","letter","onClick","onLetterClick","LetterBlanks","greyBox","textAlign","minWidth","border","boxSizing","TurnCount","ResetButton","Button","variant","size","App","handleLetterClick","dispatch","type","Fragment","Container","Row","Col","class","xs","this","React","Component","connect","state","winGame","wrongGuesses","trackGuess","currentWord","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","WordList","rootReducer","combineReducers","action","newState","newWord","Math","floor","random","length","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ad33810e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Robot = (props) => {\n  const botStyle = {\n    position: \"relative\",\n    margin: \"auto\",\n    width: \"326px\",\n    height: \"363px\",\n    background: \"#000000\",\n    boxShadow: \"0px 0px 30px rgba(121, 120, 120, 0.15)\",\n    borderRadius: \"6px\"\n  };\n\n  const body = {\n    position: \"absolute\",\n    width: \"133px\",\n    height: \"119px\",\n    left: \"32%\",\n    top: \"35%\",\n    background: \"#FFFFFF\"\n  };\n  const leftArm = {\n    position: \"absolute\",\n    width: \"24.16px\",\n    height: \"80.07px\",\n    left: \"79%\",\n    top: \"35%\",\n    background: \"#FFFFFF\",\n    transform: \"rotate(-109.89deg)\"\n  };\n  const leftLeg = {\n    position: \"absolute\",\n    width: \"72px\",\n    height: \"20px\",\n    left: \"35%\",\n    top: \"75%\",\n    background: \"#FFFFFF\",\n    transform: \"rotate(-90.89deg)\"\n  };\n  const leftFoot = {\n    position: \"absolute\",\n    width: \"19px\",\n    height: \"52px\",\n    left: \"35%\",\n    top: \"78%\",\n    background: \"#FFFFFF\",\n    transform: \"rotate(-90.89deg)\"\n  };\n  const rightFoot = {\n    position: \"absolute\",\n    width: \"19px\",\n    height: \"52px\",\n    left: \"64%\",\n    top: \"78%\",\n    background: \"#FFFFFF\",\n    transform: \"rotate(-90.89deg)\"\n  };\n  const rightLeg = {\n    position: \"absolute\",\n    width: \"72px\",\n    height: \"20px\",\n    left: \"50%\",\n    top: \"75%\",\n    background: \"#FFFFFF\",\n    transform: \"rotate(-90.89deg)\"\n  };\n  const rightArm = {\n    position: \"absolute\",\n    width: \"24.16px\",\n    height: \"80.07px\",\n    left: \"17%\",\n    top: \"35%\",\n    background: \"#FFFFFF\",\n    transform: \"rotate(-87.17deg)\"\n  };\n\n  const head = {\n    position: \"absolute\",\n    width: \"93px\",\n    height: \"74px\",\n    left: \"38%\",\n    top: \"14%\",\n    background: \"#FFFFFF\"\n  };\n\n  const rightEye = {\n    position: \"absolute\",\n    width: \"20px\",\n    height: \"20px\",\n    left: \"55%\",\n    top: \"20%\",\n    borderRadius: \"50%\",\n    background: \"#000000\"\n  };\n  const leftEye = {\n    position: \"absolute\",\n    width: \"30px\",\n    height: \"30px\",\n    left: \"45%\",\n    top: \"18.5%\",\n    borderRadius: \"50%\",\n    background: \"#000000\"\n  };\n  const mouth = {\n    position: \"absolute\",\n    width: \"57px\",\n    height: \"5px\",\n    left: \"45%\",\n    top: \"30%\",\n\n    background: \"#000000\"\n  };\n\n  return (\n    <div style={botStyle}>\n      {/* Head Elements */}\n      <div style={head} />\n      <div style={rightEye} />\n      <div style={leftEye} />\n      <div style={mouth} />\n      {/* Body Elements  */}\n      <div style={body} />\n      {/* Left Side */}\n      <div style={leftArm} />\n      <div style={leftLeg} />\n      <div style={leftFoot} />\n      {/* right side  */}\n      <div style={rightArm} />\n      <div style={rightLeg} />\n      <div style={rightFoot} />\n    </div>\n  );\n};\n\nRobot.propTypes = {};\n\nexport default Robot;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction LetterChoices(props) {\n  const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  const mainBox = {\n    margin: \"20px auto\",\n    width: \"654px\",\n    height: \"auto\",\n    background: \"#FFFFFF\",\n    boxShadow: \"0px 0px 20px rgba(102, 102, 102, 0.15)\",\n    borderRadius: \"15px\",\n    padding: \"20px\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\"\n  };\n\n  const letterBox = {\n    display: \"inline\",\n    padding: \"5px\",\n    margin: \"5px\",\n    fontSize: \"30px\",\n    fontWeight: \"bold\",\n    cursor: \"pointer\"\n  };\n  return (\n    <div style={mainBox}>\n      {letters.split(\"\").map((letter) => {\n        return (\n          <div\n            onClick={() => {\n              props.onLetterClick(letter);\n            }}\n            style={letterBox}\n          >\n            {letter}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nLetterChoices.propTypes = {\n  onLetterClick: PropTypes.func\n};\n\nexport default LetterChoices;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction LetterBlanks(props) {\n  const mainBox = {\n    textAlign: \"center\"\n  };\n\n  const outterBox = {\n    textAlign: \"center\",\n    display: \"inline-block\",\n    margin: \"10px auto\",\n    minWidth: \"25%\",\n    height: \"74px\",\n    border: \"5px solid #000000\",\n    boxSizing: \"border-box\"\n  };\n\n  const greyBox = {\n    display: \"inline-block\",\n    margin: \"10px\",\n    width: \"49px\",\n    height: \"43px\",\n    background: \"#C4C4C4\"\n  };\n  return (\n    <div style={mainBox}>\n      <div style={outterBox}>\n        <div style={greyBox} />\n        <div style={greyBox} />\n        <div style={greyBox} />\n        <div style={greyBox} />\n        <div style={greyBox} />\n        <div style={greyBox} />\n        <div style={greyBox} />\n      </div>\n    </div>\n  );\n}\n\nLetterBlanks.propTypes = {};\n\nexport default LetterBlanks;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TurnCount = (props) => {\n  const mainBox = {\n    textAlign: \"center\"\n  };\n  return (\n    <div style={mainBox}>\n      <h1>11 Turns remaining</h1>\n    </div>\n  );\n};\n\nTurnCount.propTypes = {};\n\nexport default TurnCount;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"react-bootstrap\";\n\nconst ResetButton = (props) => {\n  const mainBox = {\n    margin: \"3rem\",\n    textAlign: \"center\"\n  };\n  return (\n    <div style={mainBox}>\n      <Button variant=\"dark\" size=\"lg\">\n        ResetButton\n      </Button>\n    </div>\n  );\n};\n\nResetButton.propTypes = {};\n\nexport default ResetButton;\n","import React from \"react\";\nimport Robot from \"./Robot\";\nimport LetterChoices from \"./LetterChoices\";\nimport LetterBlanks from \"./LetterBlanks\";\nimport TurnCount from \"./TurnCount\";\nimport ResetButton from \"./ResetButton\";\nimport \"../App.css\";\nimport { connect } from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Col, Row } from \"react-bootstrap\";\nimport * as a from \"../actions/ActionTypes\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  handleLetterClick = (letter) => {\n    const { dispatch } = this.props;\n    const action = { type: a.ADD_LETTER, letter: letter };\n    dispatch(action);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Container>\n          <Row>\n            <Col>\n              <h1 class=\"text-center\"> HangBot </h1>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Robot />\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <LetterBlanks />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs=\"12\">\n              <TurnCount />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <LetterChoices onLetterClick={this.handleLetterClick} />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <ResetButton />\n            </Col>\n          </Row>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    winGame: state.winGame,\n    wrongGuesses: state.wrongGuesses,\n    trackGuess: state.trackGuess,\n    currentWord: state.currentWord\n  };\n};\n\nApp = connect(mapStateToProps)(App);\n\nexport default App;\n","//win-Game-Reducer commands\nexport const WIN_GAME = \"WIN_GAME\"; //set state to true\nexport const LOSE_GAME = \"LOSE_GAME\"; //set state to false\nexport const RESET_GAME = \"RESET_GAME\"; //reset winGame state to null\n\n//wrong-guess-reducer\nexport const WRONG_GUESS = \"WRONG_GUESS\"; //decrement by 1\nexport const RESET_GUESS = \"RESET_GUESS\"; //reset to 11\n\n//track-guess-reducer\nexport const ADD_LETTER = \"ADD_LETTER\"; // add the selected letter to letter guess array\nexport const RESET_LETTERS = \"RESET_LETTERS\"; // empty letter guess array\n\n//current-word-reducer\nexport const SET_WORD = \"SET_WORD\"; //get random word.\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const WordList = [\n  \"dogfish\",\n  \"jumping\",\n  \"Golden Girls\"\n]\n\nexport default WordList;","import setWordReducer from \"./set-word-reducer\";\nimport trackGuessReducer from \"./track-guess-reducer\";\nimport winGameReducer from \"./win-game-reducer\";\nimport wrongGuessReducer from \"./wrong-guess-reducer\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  winGame: winGameReducer,\n  wrongGuesses: wrongGuessReducer,\n  trackGuess: trackGuessReducer,\n  currentWord: setWordReducer\n});\n\nexport default rootReducer;\n","import * as a from \"../actions/ActionTypes\";\n\nexport default (state = {}, action) => {\n  switch(action.type) {\n    case a.WIN_GAME:\n      return true;\n    case a.LOSE_GAME:\n      return false;\n    case a.RESET_GAME:\n      return null;\n    default:\n      return state;\n  }\n  \n}","import * as a from '../actions/ActionTypes';\n\nexport default (state = 11, action) => {\n  switch(action.type) {\n    case a.WRONG_GUESS:\n      return state - 1;\n    case a.RESET_GUESS:\n      return 11\n    default:\n      return state;\n  }\n}","import * as a from \"../actions/ActionTypes\";\n\nexport default (state = [], action) => {\n  switch (action.type) {\n    case a.ADD_LETTER:\n      const newState = [ ...state, action.letter ];\n      return newState;\n    case a.RESET_LETTERS:\n      return [];\n    default:\n      return state;\n  }\n};\n","import * as a from \"../actions/ActionTypes\";\nimport WordList from \"../components/WordList\";\nexport default (state = \"\", action) => {\n  switch (action.type) {\n    case a.SET_WORD:\n      const newWord = WordList[Math.floor(Math.random() * WordList.length)];\n      return newWord;\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./reducers\";\nimport { createStore } from \"redux\";\n\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}